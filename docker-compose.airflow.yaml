# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

# Basic Airflow cluster configuration for CeleryExecutor with Redis and PostgreSQL.
#
# WARNING: This configuration is for local development. Do not use it in a production deployment.
#
# This configuration supports basic configuration using environment variables or an .env file
# The following variables are supported:
#
# AIRFLOW_IMAGE_NAME         - Docker image name used to run Airflow.
#                              Default: apache/airflow:master-python3.8
# AIRFLOW_UID                - User ID in Airflow containers
#                              Default: 50000
# AIRFLOW_GID                - Group ID in Airflow containers
#                              Default: 50000
# _AIRFLOW_WWW_USER_USERNAME - Username for the administrator account.
#                              Default: airflow
# _AIRFLOW_WWW_USER_PASSWORD - Password for the administrator account.
#                              Default: airflow
#
# Feel free to modify this file to suit your needs.

version: '3.8'
x-airflow-common:
  &airflow-common
  build:
    context: .
    dockerfile: ./airflow/Dockerfile
  #  image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.0.1-python3.8}
#  env-file:
#    - .env
  environment:
    &airflow-common-env
    AIRFLOW__CORE__LAZY_LOAD_PLUGINS: 'False'
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    #    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://$POSTGRES_USER:$POSTGRES_PASSWORD@$POSTGRES_HOST/$POSTGRES_DB
    #    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://$POSTGRES_USER:$POSTGRES_PASSWORD@$POSTGRES_HOST/$POSTGRES_DB
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    #    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'False'
    AIRFLOW__CORE__XCOM_BACKEND: models.xcom.LocalFileSysXCom
    AIRFLOW__CORE__DAG_RUN_CONF_OVERRIDES_PARAMS: 'True'
    #    AIRFLOW__CORE__ENABLE_XCOM_PICKLING: 'true'
    #    AIRFLOW__WEBSERVER__BASE_URL: $BASE_URL
    AIRFLOW__CELERY__FLOWER_URL_PREFIX: '/flower'
    #    AIRFLOW__WEBSERVER__ENABLE_PROXY_FIX: 'true'
    AIRFLOW__EMAIL__EMAIL_BACKEND: airflow.utils.email.send_email_smtp
    AIRFLOW__SMTP__SMTP_HOST: 'localhost'
    AIRFLOW__SMTP__SMTP_STARTTLS: 'False'
    AIRFLOW__SMTP__SMTP_SSL: 'False'
    AIRFLOW__SMTP__SMTP_PORT: '25'
    AIRFLOW__SMTP__SMTP_MAIL_FROM: 'airflow@example.com'
    AIRFLOW__WEBSERVER__SITE_TITLE: "LocalDevEnv"
    AIRFLOW__WEBSERVER__RELOAD_ON_PLUGIN_CHANGE: 'True'
#    AIRFLOW__LOGGING__LOGGING_LEVEL: "DEBUG"
#    LAKEHOUSE_CONN: $LAKEHOUSE_CONN

  volumes:
    - ./dags:/opt/airflow/dags
    - ./logs:/opt/airflow/logs
    - ./plugins:/opt/airflow/plugins
    - ./includes:/opt/airflow/includes
    - ./templates:/opt/airflow/templates
    - ./scripts:/opt/airflow/scripts
    - ./reports:/opt/airflow/reports
    - ./src:/opt/airflow/src
#    - hadoop:/opt/hadoop
#    - hive:/opt/hive
#    - spark:/opt/spark
  depends_on:
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy

services:
  postgres:
    image: postgres:${POSTGRES_VERSION}
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    ports:
      - 5432:5432
    volumes:
       - ./pg_data:/var/lib/postgresql/data/pgdata
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "airflow" ]
      interval: 5s
      retries: 5
    restart: always
    networks:
      - ${NETWORK_NAME}

  redis:
    image: redis:latest
    ports:
      - 6379:6379
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 30s
      retries: 50
    restart: always
    networks:
      - ${NETWORK_NAME}

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - 8080:8080
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://localhost:8080/health" ]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    networks:
      - ${NETWORK_NAME}

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    restart: always
    networks:
      - ${NETWORK_NAME}

  airflow-worker:
    <<: *airflow-common
    command: celery worker
    restart: always
    networks:
      - ${NETWORK_NAME}

  airflow-init:
    <<: *airflow-common
    command: version
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
    networks:
      - ${NETWORK_NAME}

  flower:
    <<: *airflow-common
    command: celery flower
    ports:
      - 5555:5555
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://localhost:5555/" ]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    networks:
      - ${NETWORK_NAME}

  vertica-tunnel:
    container_name: tunnel
    image: cagataygurturk/docker-ssh-tunnel:0.0.3
    volumes:
      - ~/.ssh:/root/ssh:ro
    environment:
      SSH_DEBUG: "-v"
      TUNNEL_HOST: ver  # this is your connection name from .ssh/config
      REMOTE_HOST: 10.1.10.17
      LOCAL_PORT: 5433
      REMOTE_PORT: 5433
    networks:
      - ${NETWORK_NAME}


volumes:
  airflow:
    name: airflow

networks:
  ${NETWORK_NAME}:
    name: ${NETWORK_NAME}
    driver: bridge

# sudo chmod u=rwx,g=rwx,o=rwx $PWD/logs
